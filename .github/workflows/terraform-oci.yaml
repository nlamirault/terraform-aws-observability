# SPDX-FileCopyrightText: Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
# SPDX-License-Identifier: Apache-2.0

---
name: Terraform / OCI

on:
  push:
    tags:
      - v*
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read

env:
  REGISTRY: ghcr.io

jobs:
  publish-oci:
    permissions:
      attestations: write # need for Artifact Attestations
      contents: write     # to push chart release and create a release (helm/chart-releaser-action)
      id-token: write     # needed for keyless signing
      packages: write     # needed for ghcr access

    runs-on: ubuntu-latest

    outputs:
      digest: ${{ steps.get-digest.outputs.digest }}
      image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/modules/${{ steps.release-details.outputs.release_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Extract repository name
        run: |
          REPO_NAME=$(basename "${GITHUB_REPOSITORY}")
          echo "Repository name: $REPO_NAME"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Extract Terraform module name and version
        id: release-details
        run: |
          echo release_name=$REPO_NAME >> $GITHUB_OUTPUT
          echo release_version=${{ github.ref_name }} >> $GITHUB_OUTPUT
          echo $REPO_NAME
          echo ${{ github.ref_name }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Oras
        uses: oras-project/setup-oras@v1

      - name: Push Terraform module to GHCR
        run: |
          oras version
          oras push ${{ env.REGISTRY }}/${{ github.repository_owner }}/modules/${{ steps.release-details.outputs.release_name }}:${{ steps.release-details.outputs.release_version }} \
            --artifact-type application/vnd.terraform.module \
            --annotation "org.opencontainers.image.title=Terraform AWS Observability Module" \
            --annotation "org.opencontainers.image.description=Provision AWS observability stack (Prometheus, Grafana, X-Ray, CloudWatch) with Terraform" \
            --annotation "org.opencontainers.image.authors=Nicolas Lamirault <nicolas.lamirault@gmail.com>" \
            --annotation "org.opencontainers.image.version=${{ steps.release-details.outputs.release_version }}" \
            --annotation "org.opencontainers.image.ref.name=${{ steps.release-details.outputs.release_name }}" \
            --annotation "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
            --annotation "org.opencontainers.image.documentation=https://github.com/${{ github.repository }}" \
            --annotation "org.opencontainers.image.issue-tracker=https://github.com/${{ github.repository }}/issues" \
            --annotation "org.opencontainers.image.licenses=Apache-2.0" \
            modules/

      - name: Setup Crane
        uses: imjasonh/setup-crane@31b88efe9de28ae0ffa220711af4b60be9435f6e # v0.4

      - name: Get pushed module digest
        id: get-digest
        run: |
          digest=$(crane digest ${{ env.REGISTRY }}/${{ github.repository_owner }}/modules/${{ steps.release-details.outputs.release_name }}:${{ steps.release-details.outputs.release_version }})
          echo digest=$digest >> "$GITHUB_OUTPUT"
          echo $digest

      - name: Install cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

      - name: Use Cosign
        run: |
          artifact_digest_uri="${{ env.REGISTRY }}/${{ github.repository_owner }}/modules/${{ steps.release-details.outputs.release_name }}@${{ steps.get-digest.outputs.digest }}"
          cosign sign --yes "${artifact_digest_uri}"
          cosign verify "${artifact_digest_uri}" \
              --certificate-identity-regexp "https://github.com/${{ github.repository }}/*" \
              --certificate-oidc-issuer https://token.actions.githubusercontent.com
          echo cosign verify "${artifact_digest_uri}" \
              --certificate-identity-regexp "https://github.com/${{ github.repository }}/*" \
              --certificate-oidc-issuer https://token.actions.githubusercontent.com

      - name: Generate SBOM
        uses: anchore/sbom-action@55dc4ee22412511ee8c3142cbea40418e6cec693 # v0.17.8
        with:
          image: ${{ env.IMAGE_TAG }}
          artifact-name: sbom-${{ env.IMAGE_NAME }}
          output-file: ./sbom-${{ env.IMAGE_NAME }}.spdx.json

      # - name: Attach SBOM to release
      #   uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2
      #   with:
      #     tag_name: ${{ needs.release-please.outputs.tag_name }}
      #     files: ./sbom-${{ env.IMAGE_NAME }}.spdx.json

      - name: Attest
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/modules/${{ steps.release-details.outputs.release_name }}
          subject-digest: ${{ steps.get-digest.outputs.digest }}
          push-to-registry: true

  terraform-provenance:
    needs:
      - publish-oci
    permissions:
      actions: read     # To read the workflow path.
      id-token: write   # To sign the provenance.
      packages: write   # To upload assets to release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      digest: "${{ needs.publish-oci.outputs.digest }}"
      image: "${{ needs.publish-oci.outputs.image }}"
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  verification-with-cosign:
    needs:
      - publish-oci
      - terraform-provenance
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Cosign

        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

      - name: Verify image
        env:
          IMAGE: "${{ needs.publish-oci.outputs.image }}"
          DIGEST: ${{ needs.publish-oci.outputs.digest }}
        run: |
          cosign verify-attestation \
              --type slsaprovenance \
              --certificate-oidc-issuer https://token.actions.githubusercontent.com \
              --certificate-identity-regexp '^https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/tags/v[0-9]+.[0-9]+.[0-9]+$' \
              $IMAGE@$DIGEST
